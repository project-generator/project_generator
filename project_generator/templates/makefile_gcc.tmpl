#
# Copyright (c) 2014-2015 0xc0170
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This project was exported via the project generator.  More information https://github.com/project-generator/project_generator

CPU = {{core}}

# toolchain specific
TOOLCHAIN = {{toolchain}}
TOOLCHAIN_BINPATH = {{toolchain_bin_path}}
CC = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)gcc
CXX = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)g++
AS = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)gcc -x assembler-with-cpp
LD = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)gcc
AR = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)ar

SIZE = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)size
OBJCOPY = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)objcopy
OBJDUMP = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)objdump
NM = $(TOOLCHAIN_BINPATH)$(TOOLCHAIN)nm

# application specific
INSTRUCTION_MODE = thumb
TARGET = {{name}}
{% if output_type == 'exe' %}
TARGET_EXT =
{% else %}
TARGET_EXT = a
{% endif %}

LD_SCRIPT = {% for file in linker_file %} {{file}} {% endfor %}

CC_SYMBOLS = {% for symbol in macros %} -D{{symbol}} {% endfor %}

LIBS = {% for library in libraries %} -l{{library}} {% endfor %} 
{% if standard_libraries %} 
LIBS += -Wl,--start-group  {% for library in standard_libraries %} -l{{library}} {% endfor %} -Wl,--end-group
{% endif %} 

LIB_PATHS = {% for path in lib_paths %} -L{{path}} {% endfor %}


# directories
INC_DIRS = {% for path in include_paths %} {{path}} {% endfor %}

OUT_DIR = {{build_dir}}

INC_DIRS_F = -I. $(patsubst %, -I%, $(INC_DIRS))

SRC_DIRS = {% for path in source_paths %} {{path}} {% endfor %}

ifeq ($(strip $(OUT_DIR)), )
	OBJ_FOLDER =
else
	OBJ_FOLDER = $(strip $(OUT_DIR))/
endif

# Flags
COMMON_FLAGS = {% for option in common_flags %} {{option}} {% endfor %}
COMMON_FLAGS += -mcpu=$(CPU) -m$(INSTRUCTION_MODE) -MMD -MP $(CC_SYMBOLS)

C_FLAGS  = {% for option in c_flags %} {{option}} {% endfor %}
CXX_FLAGS  = {% for option in cxx_flags %} {{option}} {% endfor %}
ASM_FLAGS  = {% for option in asm_flags %} {{option}} {% endfor %}

CFLAGS = $(C_FLAGS) $(INC_DIRS_F) -c
CXXFLAGS = $(CXX_FLAGS) $(INC_DIRS_F) -c
ASFLAGS = $(ASM_FLAGS) $(INC_DIRS_F) -c

# Linker options
LD_OPTIONS = -mcpu=$(CPU) -m$(INSTRUCTION_MODE)
LD_OPTIONS += {% for option in ld_flags %} {{option}} {% endfor %}
LD_OPTIONS += -Wl,-Map=$(OBJ_FOLDER)$(TARGET).map,--cref -T$(LD_SCRIPT)

OBJCPFLAGS = -O ihex

ARFLAGS = cr

ifeq ($(OS),Windows_NT)
	RM = rmdir /s /q
else
	RM = rm -rf
endif

C_SRCS := {% for file in source_files_c %} {{file}} {% endfor %}
C_OBJS := $(patsubst %.c,$(OBJ_FOLDER)%.o,$(notdir $(C_SRCS)))

CPP_SRCS := {% for file in source_files_cpp %} {{file}} {% endfor %}
CPP_OBJS := $(patsubst %.cpp,$(OBJ_FOLDER)%.o,$(notdir $(CPP_SRCS)))

S_SRCS := {% for file in source_files_s %} {{file}} {% endfor %}
S_OBJS = $(patsubst %.s,$(OBJ_FOLDER)%.o,$(filter %.s,$(notdir $(S_SRCS))))
S_OBJS += $(patsubst %.S,$(OBJ_FOLDER)%.o,$(filter %.S,$(notdir $(S_SRCS))))

O_OBJS := {% for file in source_files_obj %} {{file}} {% endfor %}

VPATH := $(SRC_DIRS)

$(OBJ_FOLDER)%.o : %.c
	@echo 'Building file: $(@F)'
	@echo 'Invoking: MCU C Compiler'
	$(CC) $(CFLAGS) $(COMMON_FLAGS) $< -o $@
	@echo 'Finished building: $(@F)'
	@echo ' '

$(OBJ_FOLDER)%.o : %.cpp
	@echo 'Building file: $(@F)'
	@echo 'Invoking: MCU C++ Compiler'
	$(CXX) $(CXXFLAGS) $(COMMON_FLAGS) $< -o $@
	@echo 'Finished building: $(@F)'
	@echo ' '

$(OBJ_FOLDER)%.o : %.s
	@echo 'Building file: $(@F)'
	@echo 'Invoking: MCU Assembler'
	$(AS) $(ASFLAGS) $(COMMON_FLAGS) $< -o $@
	@echo 'Finished building: $(@F)'
	@echo ' '

all: create_outputdir $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) print_info

create_outputdir:
ifeq ($(OS),Windows_NT)
	-mkdir $(OUT_DIR)
else
	$(shell mkdir $(OBJ_FOLDER) 2>/dev/null)
endif

{% if output_type == 'exe' %}
# Tool invocations
$(OBJ_FOLDER)$(TARGET).$(TARGET_EXT): $(LD_SCRIPT) $(C_OBJS) $(CPP_OBJS) $(S_OBJS)
	@echo 'Building target: $@'
	@echo 'Invoking: MCU Linker'
	$(LD) $(LIB_PATHS) -o $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) $(CPP_OBJS) $(C_OBJS) $(S_OBJS) $(O_OBJS) $(LIBS) $(LD_OPTIONS)
	@echo 'Finished building target: $@'
	@echo ' '

print_info:
	@echo 'Printing size'
	$(SIZE) --totals $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT)
	$(OBJCOPY) -O ihex $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) $(OBJ_FOLDER)$(TARGET).hex
	$(OBJCOPY) -O binary -v $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) $(OBJ_FOLDER)$(TARGET).bin
	$(OBJDUMP) -D $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) > $(OBJ_FOLDER)$(TARGET).lst
	$(NM) $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) > $(OBJ_FOLDER)$(TARGET)-symbol-table.txt
	@echo ' '

{% else %}
$(OBJ_FOLDER)$(TARGET).$(TARGET_EXT): $(C_OBJS) $(CPP_OBJS) $(S_OBJS)
	@echo 'Building library: $@'
	$(AR) rcs $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT) $(CPP_OBJS) $(C_OBJS) $(S_OBJS)
	@echo 'Finished building library: $@'
	@echo ' '

print_info:
	@echo 'Printing size'
	$(SIZE) --totals $(OBJ_FOLDER)$(TARGET).$(TARGET_EXT)
	@echo ' '
{% endif %}

# Other Targets
clean:
	@echo 'Removing entire out directory'
	$(RM) $(TARGET).$(TARGET_EXT) $(TARGET).bin $(TARGET).map $(OBJ_FOLDER)*.* $(OBJ_FOLDER)
	@echo ' '

{% block extra_targets %}
{% endblock %}

.PHONY: all clean print_info
