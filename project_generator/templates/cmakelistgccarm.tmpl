{#
# Copyright (c) 2015 0xc0170
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#}
# This project was exported via the project generator.  More information https://github.com/project-generator/project_generator

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)

include(CMakeForceCompiler)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR {{core}})

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

find_program(ARM_NONE_EABI_GCC arm-none-eabi-gcc)
find_program(ARM_NONE_EABI_GPP arm-none-eabi-g++)
find_program(ARM_NONE_EABI_OBJCOPY arm-none-eabi-objcopy)

cmake_force_c_compiler("${ARM_NONE_EABI_GCC}" GNU)
cmake_force_cxx_compiler("${ARM_NONE_EABI_GPP}" GNU)

project ({{name}})
enable_language(ASM)

{% for symbol in macros %}
set(DEFINES "${DEFINES} -D{{symbol}}"){% endfor %}

{% for path in includes %}
include_directories("{{path}}"){% endfor %}

{% for library in misc['standard_libraries'] %}
set(LIBRARIES ${LIBRARIES} {{library}}){% endfor %}

{#
# TODO 0xc0170: fix this dict
#{% for library in source_files_lib %}
#set(LIBRARIES ${LIBRARIES} {{library}}){% endfor %}
#}

{% for path in lib_paths %}
link_directories("{{path}}"){% endfor %}

{% for file in source_files_c %}
set(SOURCES_C ${SOURCES_C} "{{file}}"){% endfor %}
{% for file in source_files_cpp %}
set(SOURCES_CPP ${SOURCES_CPP} "{{file}}"){% endfor %}
{% for file in source_files_s %}
set(SOURCES_S ${SOURCES_S} "{{file}}"){% endfor %}

{% for file in source_files_obj %}
set(OBJECT_FILES ${OBJECT_FILES} "{{file}}"){% endfor %}

set(COMMON_FLAGS "-mcpu={{core}} -mthumb{% for flag in misc['common_flags'] %} {{flag}}{% endfor %}")
set(CMAKE_CXX_FLAGS "${COMMON_FLAGS} ${DEFINES} {% for flag in misc['cxx_flags'] %} {{flag}}{% endfor %}")
set(CMAKE_C_FLAGS "${COMMON_FLAGS} ${DEFINES} {% for flag in misc['c_flags'] %} {{flag}}{% endfor %}")
set(CMAKE_EXE_LINKER_FLAGS "-mcpu={{core}} -mthumb {% for flag in misc['linker_flags'] %} {{flag}}{% endfor %}")

{% if linker_options %}
set(CMAKE_EXE_LINKER_FLAGS "{{linker_options}}"){% endif %}
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} \"-T{{linker_file}}\" -static")

set(EXECUTABLE_OUTPUT_PATH {{build_dir}})
# set(PROJECT_FOLDER {{name}})

{# Lib or exe #}
{% if output_type == 'exe' %}
add_executable({{name}} ${SOURCES_C} ${SOURCES_CPP} ${SOURCES_S}{% if source_files_obj %} ${OBJECT_FILES}{% endif %})
{% else %}
add_library({{name}} STATIC ${SOURCES_C} ${SOURCES_CPP} ${SOURCES_S}{% if source_files_obj %} ${OBJECT_FILES}{% endif %})
{% endif %}

set_target_properties({{name}} PROPERTIES LINKER_LANGUAGE C)
{% if misc['standard_libraries'] %}
target_link_libraries({{name}} ${LIBRARIES}){% endif %}

add_custom_command(TARGET {{name}} COMMAND "${ARM_NONE_EABI_OBJCOPY}" -O binary ${CMAKE_CURRENT_SOURCE_DIR}/{{build_dir}}/{{name}} ${CMAKE_CURRENT_SOURCE_DIR}/{{build_dir}}/{{name}}.bin)
